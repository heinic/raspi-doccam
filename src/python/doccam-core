#!/usr/bin/env python
# coding=UTF-8

# Raspberry Pi document camera
# Copyright (C) 2017  Nico Heitmann
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os, sys, io, time
import threading, subprocess
import socket, json
import doccam._camera as camera

import doccam.logger as logger


def ipcListen():
    """Waits for requests via IPC and handles them in seperate threads."""
    sockServer = socket.socket()
    sockServer.bind(("127.3.1.4", 3141));

    while True:
        sockServer.listen(1)
        # Accept the next connection
        conn = sockServer.accept()

        threadHandle = threading.Thread(target = ipcHandle, args = {conn[0]})
        threadHandle.daemon = True
        threadHandle.start()

def ipcHandle(conn):
    """Handle IPC requests"""
    global wifiSsid, wifiPass, wifiChanged

    listen = True
    try:
        while listen:
            strdat = conn.recv(4094)
            if not strdat: break
            data = json.loads(strdat) # load json to an array
            logger.log("{threadname} handling request \"{request}\""
                    .format(threadname=threading.currentThread().getName(), request=data))

            if data[0] == "conf":
                if data[1] == "load": # Load config
                    loadConfig()
                    conn.send("success")
                if data[1] == "save": # Save config
                    saveConfig()
                    conn.send("success")

            if data[0] == "cam": # Camera related actions
                if data[1] == "cappic_stream": # Capture image and send it via the IPC socket
                    data[2] = data[2].split(';')

                    res = camera.DEFAULT_RESOLUTION
                    # Change the resolution if requested
                    if(data[2][0] and data[2][0] == 'thumb'):
                        res = camera.THUMB_RESOLUTION
                    if(data[2][0] and data[2][0] == 'hires'):
                        res = camera.MAX_RESOLUTION

                    try:
                        if(len(data[2]) != 5): # No crop requested
                            camera.capture(conn.makefile("wb"), res=res)

                        else: # Crop requested
                            crop = (float(data[2][1]), float(data[2][2]),
                                    float(data[2][3]), float(data[2][4]))
                            camera.captureArea(conn.makefile("wb"), res=res, crop=crop)

                    except Exception as e:
                        raise

                    listen = False
                if data[1] == "flip":
                    if data[2] == "": # Respond with the current flip
                        if(camera.cam.hflip): conn.send("h")
                        elif(camera.cam.vflip): conn.send("v")
                        else: conn.send("n")
                    else: # Change flip
                        flip = data[2]
                        if(flip == "n" or flip == "h" or flip == "v"):
                            camera.cam.hflip = flip == "h"
                            camera.cam.vflip = flip == "v"

                            conn.send("success")
                if data[1] == "rot":
                    if data[2] == "": # Respond with current rotation
                        conn.send(str(camera.cam.rotation))
                    else: # Change rotation
                        try:
                            if(int(data[2]) in (0, 90, 180, 270)):
                                camera.cam.rotation = int(data[2])
                                camera.setBounds(camera.DEFAULT_RESOLUTION, camera.globalCrop)
                                conn.send("success")
                        except ValueError as e: pass # EAFP

                if data[1] == "preview":
                    if data[2] == "": # Send back the preview status
                        conn.send("1" if camera.cam.preview else "0")
                    else: # Change preview status
                        if(data[2] in ("0", "1")):
                            if data[2] == "1":
                                camera.cam.start_preview()
                            else:
                                camera.cam.stop_preview()
                            conn.send("success")

                if data[1] == "crop":
                    if data[2] == "": # Respond with current crop
                        conn.send(json.dumps(camera.globalCrop))
                    else: # Set global crop
                        newCrop = json.loads(data[2])
                        if(len(newCrop) == 4):
                            newCrop = [float(i) for i in newCrop]
                            camera.globalCrop = newCrop
                            camera.setBounds(camera.DEFAULT_RESOLUTION, newCrop)
                            conn.send("success")

                if data[1] == "zoom":
                    diff = 0
                    if(data[2] == "+"): diff = -0.1
                    elif(data[2] == "-"): diff =  0.1
                    else:
                        conn.send("Invalid argument")
                        break

                    camera.zoom(diff)
                    conn.send("success")

            if data[0] == "wifi": # WiFi settings
                if data[1] == "newpass":
                    # Generate a new password using /dev/urandom
                    chars = string.ascii_letters + string.digits
                    chars += "+-/*_<>=?!&()[]}{/\\"
                    passwd = ""
                    for i in range(10):
                        charid = os.urandom(1)
                        char = chars[ord(charid) % len(chars)]
                        passwd += char

                    wifiPass = passwd
                    wifiChanged = True
                    logger.log("New Password: \"{passwd}\"".format(passwd=passwd))
                    conn.send(wifiPass)
                if data[1] == "pass": # Respond with the current password
                    conn.send(wifiPass)
                if data[1] == "ssid":
                    if data[2] == "": # Respond with the current SSID
                        conn.send(wifiSsid)
                    else: # Change the SSID
                        wifiSsid = data[2]
                        wifiChanged = True
                        conn.send("success")
    except Exception as e:
        raise

def videoListen():
    """Waits for connections to port 8101 and sends a stream encoded in h264"""
    sockServer = socket.socket()
    sockServer.bind(("0.0.0.0", 8101));
    sockServer.listen(0)

    while True:
        conn = None
        try:
            time.sleep(1)
            conn = sockServer.accept()
            logger.log("Sending video stream to {addr}".format(addr=str(conn[1])))

            camera.cam.start_recording(conn[0].makefile("wb"), format="h264");
            camera.cam.wait_recording(300)
        except Exception as e:
            if e == "KeyboardInterrupt":
                raise
            pass
        finally:
            if camera.cam.recording:
                try:
                    camera.cam.stop_recording()
                except Exception as e: pass
            try:
                conn[0].shutdown(socket.SHUT_RDWR)
            except Exception as e:
                pass
            conn = None

def loadConfig():
    """Loads configuration"""
    # Hostapd:
    global wifiSsid, wifiPass, wifiChanged
    wifiSsid = "---"
    wifiPass = "---"

    wifilines = None
    with io.open("/etc/hostapd/hostapd.conf") as file:
        wifilines = file.readlines()

    for line in wifilines:
        if(line.startswith("ssid=")):
            wifiSsid = line.split("=", 1)[1].strip()
            logger.log('SSID: "{ssid}"'.format(ssid=wifiSsid))
        if(line.startswith("wpa_passphrase=")):
            wifiPass = line.split("=", 1)[1].strip()
            logger.log('PASS: "{passwd}"'.format(passwd=wifiPass))
    wifiChanged = False

def saveConfig():
    """Saves all of the changed configuration variables"""
    logger.log("Saving config")
    # Hostapd:

    global wifiSsid, wifiPass, wifiChanged
    if wifiChanged:
        logger.log("Saving hostapd config")

        wifilines = None
        with io.open("/etc/hostapd/hostapd.conf") as file:
            wifilines = file.readlines()

        for i in range(0, len(wifilines)):
            line = wifilines[i]
            if(line.startswith("ssid=")):
                line = u'ssid={!s}\n'.format(wifiSsid)
            if(line.startswith("wpa_passphrase=")):
                line = u'wpa_passphrase={!s}\n'.format(wifiPass)
            wifilines[i] = line

        with io.open("/etc/hostapd/hostapd.conf", "wt") as file:
            for line in wifilines:
                file.write(line)

        logger.log("Restarting hostapd...")
        subprocess.call(["sudo", "service", "hostapd", "restart"])
    else:
        logger.log("Not saving hostapd config")
    logger.log("Done saving config")

# Config
loadConfig()

# IPC
threadServerIPC = threading.Thread(target = ipcListen)
threadServerIPC.daemon = True
threadServerIPC.start()

# h264 Vido Server
threadServerVideo = threading.Thread(target = videoListen)
threadServerVideo.daemon = True
threadServerVideo.start()

logger.log("Started doccam-core")

try:
    while True:
        time.sleep(1000)
except Exception as e:
    logger.shutdown()
    raise
